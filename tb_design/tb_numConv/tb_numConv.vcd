$date
	Thu Jul 18 23:14:03 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module tb_numConv $end
$var wire 4 ! gray_2_bin [3:0] $end
$var wire 4 " bin_2_gray [3:0] $end
$var parameter 32 # n $end
$var reg 4 $ bin [3:0] $end
$var reg 4 % exp_gray [3:0] $end
$scope function code_conv $end
$var reg 4 & bin [3:0] $end
$var reg 4 ' gray [3:0] $end
$upscope $end
$scope module DUT $end
$var wire 4 ( bin [3:0] $end
$var wire 4 ) bin_2_gray [3:0] $end
$var parameter 32 * n $end
$var reg 4 + gray_2_bin [3:0] $end
$var integer 32 , i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 - i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 *
b100 #
$end
#0
$dumpvars
b0 -
b100 ,
b100 +
b110 )
b100 (
b110 '
b100 &
b110 %
b100 $
b110 "
b100 !
$end
#10000000000
b1 !
b1 +
b100 ,
b1 "
b1 )
b1 %
b1 '
b1 &
b1 $
b1 (
b1 -
#20000000000
b1001 !
b1001 +
b100 ,
b1101 "
b1101 )
b1101 %
b1101 '
b1001 &
b1001 $
b1001 (
b10 -
#30000000000
b11 !
b11 +
b100 ,
b10 "
b10 )
b10 %
b10 '
b11 &
b11 $
b11 (
b11 -
#40000000000
b1101 !
b1101 +
b100 ,
b1011 "
b1011 )
b1011 %
b1011 '
b1101 &
b1101 $
b1101 (
b100 -
#50000000000
b101 -
#60000000000
b101 !
b101 +
b100 ,
b111 "
b111 )
b111 %
b111 '
b101 &
b101 $
b101 (
b110 -
#70000000000
b10 !
b10 +
b100 ,
b11 "
b11 )
b11 %
b11 '
b10 &
b10 $
b10 (
b111 -
#80000000000
b1 !
b1 +
b100 ,
b1 "
b1 )
b1 %
b1 '
b1 &
b1 $
b1 (
b1000 -
#90000000000
b1101 !
b1101 +
b100 ,
b1011 "
b1011 )
b1011 %
b1011 '
b1101 &
b1101 $
b1101 (
b1001 -
#100000000000
b110 !
b110 +
b100 ,
b101 "
b101 )
b101 %
b101 '
b110 &
b110 $
b110 (
b1010 -
#110000000000
b1101 !
b1101 +
b100 ,
b1011 "
b1011 )
b1011 %
b1011 '
b1101 &
b1101 $
b1101 (
b1011 -
#120000000000
b1100 -
#130000000000
b1100 !
b1100 +
b100 ,
b1010 "
b1010 )
b1010 %
b1010 '
b1100 &
b1100 $
b1100 (
b1101 -
#140000000000
b1001 !
b1001 +
b100 ,
b1101 "
b1101 )
b1101 %
b1101 '
b1001 &
b1001 $
b1001 (
b1110 -
#150000000000
b110 !
b110 +
b100 ,
b101 "
b101 )
b101 %
b101 '
b110 &
b110 $
b110 (
b1111 -
#160000000000
b101 !
b101 +
b100 ,
b111 "
b111 )
b111 %
b111 '
b101 &
b101 $
b101 (
b10000 -
#170000000000
b1010 !
b1010 +
b100 ,
b1111 "
b1111 )
b1111 %
b1111 '
b1010 &
b1010 $
b1010 (
b10001 -
#180000000000
b101 !
b101 +
b100 ,
b111 "
b111 )
b111 %
b111 '
b101 &
b101 $
b101 (
b10010 -
#190000000000
b111 !
b111 +
b100 ,
b100 "
b100 )
b100 %
b100 '
b111 &
b111 $
b111 (
b10011 -
#200000000000
b10 !
b10 +
b100 ,
b11 "
b11 )
b11 %
b11 '
b10 &
b10 $
b10 (
b10100 -
#210000000000
b1111 !
b1111 +
b100 ,
b1000 "
b1000 )
b1000 %
b1000 '
b1111 &
b1111 $
b1111 (
b10101 -
#220000000000
b10 !
b10 +
b100 ,
b11 "
b11 )
b11 %
b11 '
b10 &
b10 $
b10 (
b10110 -
#230000000000
b1110 !
b1110 +
b100 ,
b1001 "
b1001 )
b1001 %
b1001 '
b1110 &
b1110 $
b1110 (
b10111 -
#240000000000
b1000 !
b1000 +
b100 ,
b1100 "
b1100 )
b1100 %
b1100 '
b1000 &
b1000 $
b1000 (
b11000 -
#250000000000
b101 !
b101 +
b100 ,
b111 "
b111 )
b111 %
b111 '
b101 &
b101 $
b101 (
b11001 -
#260000000000
b1100 !
b1100 +
b100 ,
b1010 "
b1010 )
b1010 %
b1010 '
b1100 &
b1100 $
b1100 (
b11010 -
#270000000000
b1101 !
b1101 +
b100 ,
b1011 "
b1011 )
b1011 %
b1011 '
b1101 &
b1101 $
b1101 (
b11011 -
#280000000000
b11100 -
#290000000000
b101 !
b101 +
b100 ,
b111 "
b111 )
b111 %
b111 '
b101 &
b101 $
b101 (
b11101 -
#300000000000
b11 !
b11 +
b100 ,
b10 "
b10 )
b10 %
b10 '
b11 &
b11 $
b11 (
b11110 -
#310000000000
b1010 !
b1010 +
b100 ,
b1111 "
b1111 )
b1111 %
b1111 '
b1010 &
b1010 $
b1010 (
b11111 -
#320000000000
b100000 -
