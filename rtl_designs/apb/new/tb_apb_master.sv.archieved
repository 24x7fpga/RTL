`include "package.svh"
module tb_apb_master;
 
   localparam t = 8; 
   logic      clk; 
   logic      rst; 

   logic [`WIDTH-1:0] p_addr;
   logic [`WIDTH-1:0]	      pw_data;
   logic [3:0]		      p_sel;
   logic		      p_wr;
   logic		      trans;
   logic		      pready;
   
   
   /*AUTOREG*/ 
   /*AUTOWIRE*/ 
   // Beginning of automatic wires (for undeclared instantiated-module outputs)
   wire			m_en;			// From DUT of apb.v
   wire [`WIDTH-1:0]	m_paddr;		// From DUT of apb.v
   wire			m_prdata;		// From DUT of apb.v
   wire [3:0]		m_pselx;		// From DUT of apb.v
   wire [`WIDTH-1:0]	m_pwdata;		// From DUT of apb.v
   wire			m_pwrite;		// From DUT of apb.v
   wire			m_rdy;			// From DUT of apb.v
   // End of automatics
   
   apb DUT (/*AUTOINST*/
	    // Outputs
	    .m_paddr			(m_paddr[`WIDTH-1:0]),
	    .m_pwdata			(m_pwdata[`WIDTH-1:0]),
	    .m_pselx			(m_pselx[3:0]),
	    .m_en			(m_en),
	    .m_pwrite			(m_pwrite),
	    .m_rdy			(m_rdy),
	    .m_prdata			(m_prdata),
	    // Inputs
	    .p_addr			(p_addr[`WIDTH-1:0]),
	    .pw_data			(pw_data[`WIDTH-1:0]),
	    .p_sel			(p_sel[3:0]),
	    .p_wr			(p_wr),
	    .trans			(trans),
	    .pclk			(pclk),
	    .presetn			(presetn),
	    .pready			(pready)); 

   // generate clock
   always #(t/2) clk = (clk === 1'b0);
   // assign clk to DUT pclk
   assign pclk = clk;

   // generate reset
   task reset();
      rst <= 0;
      repeat(3) @(posedge clk);
      rst <= 1;
   endtask // reset
   // assign rst to DUT reset
   assign presetn = rst;

   // start simulation
   task run();
      reset();

      // timeout logic
      fork begin
	 repeat(1000) @(posedge clk);
	 $display("Simulation TIMEOUT! ;(");
	 $finish;
      end
      join_none

      // no wait time
      pready <= 1;
      for(int i = 0; i < 16; i = i + 1) begin
	 wait(m_rdy == 1);
	 p_addr  <= i;
	 pw_data <= $urandom_range(1,30);
	 p_sel   <= 4'h1;
	 p_wr    <= 1'h1;
	 trans   <= 1'h1;
	 @(posedge clk);
	 
	 while(!m_en)
	   @(posedge clk);
      end // for (int i = 0; i < 16; i = i + 1)

      
      // with wait time
      pready <= 1;
      for(int i = 0; i < 16; i = i + 1) begin
         pready  <= 0;
	 p_addr  <= i;
	 pw_data <= $urandom_range(1,30);
	 p_sel   <= 4'h1;
	 p_wr    <= 1'h1;
	 trans   <= 1'h1;
	 @(posedge clk);

	 while(!pready) begin
	    @(posedge clk)
	    pready <= $urandom();
	 end
	 
	 while(!m_en)
	   @(posedge clk);
      end // for (int i = 0; i < 16; i = i + 1)
      
   endtask // run

   // checking output data
   logic [$clog2(`WIDTH)-1:0] assoc [`WIDTH-1:0];
   
   always @(posedge clk) begin
      if(rst) begin
	 assoc[p_addr] <= pw_data;
      end

      if(m_en && m_rdy)begin
	 if(assoc[p_addr] == assoc[m_paddr])
	   $display("s.addr = %d, s.data = %d <==> r.addr = %d, r.data = %d :: PASS ;)", p_addr, assoc[p_addr], m_paddr, assoc[m_paddr]);
	 else
	   $display("s.addr = %d, s.data = %d <==> r.addr = %d, r.data = %d :: FAIL ;(", p_addr, assoc[p_addr], m_paddr, assoc[m_paddr]);
      end
   end
  
endmodule 
// Local Variables: 
// Verilog-Library-Directories: (".")
// End: 
