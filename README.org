#+title: RTL Design Blocks: Basic to Advance
#+startup: showeverything
#+options: toc:nil
  
* Table of Contents :toc:
- [[#features][Features]]
- [[#folder-structure][Folder Structure]]
- [[#python-scripts][Python Scripts]]
  - [[#rtl_scripts][rtl_scripts]]
  - [[#iv_scripts][iv_scripts]]
  - [[#veri_scripts][veri_scripts]]
  - [[#vivado_scripts][vivado_scripts]]
  - [[#clean_scripts][clean_scripts]]
- [[#ongoing-list-of-design-examples][Ongoing list of design examples]]

* Features

- RTL Design Blocks: Modular designs for various digital logic components.
   
- Simulation Support: The designs are compatible with
  - [[https://www.amd.com/en/products/software/adaptive-socs-and-fpgas/vivado.html][Vivado]] : Industry-standard for FPGA design and verification.
  - [[https://verilator.org/guide/latest/][Verilator]]: High-performance Verilog simulator.
  - [[https://bleyer.org/icarus/][Icarus Verilog]]: Open-source Verilog simulator.
  - [[https://gtkwave.sourceforge.net/][GTKwave]]: Waveform viewer for debugging and analysis.

- Automation: [[https://github.com/24x7fpga/Python_Scripts][Python_Scripts]] to streamline the design, simulation, and verification workflows.

* Folder Structure

The repository is organized to facilitate efficient RTL design and simulation processes. Below is a breakdown of the folder structure and its contents:

#+begin_src bash
RTL
.
├── doc
├── README.org
├── rtl_designs
│   ├── adder_subtractor
│   ├── always_at_comb
│          ... 
│          ...
│          ...
│
├── rtl_tcl_scripts
│   └── rtl_run.tcl
└── rtl_templates
    ├── design.sv
    ├── interface.sv
    ├── package.svh
    └── tb_design.sv
#+end_src

1. [[https://github.com/24x7fpga/RTL/tree/master/doc][doc]]: This folder contains documentation files that provide detailed descriptions of the repository's components, usage guidelines, and design methodologies.
2. [[https://github.com/24x7fpga/RTL/blob/master/README.org][README.org]]: The main entry point for understanding the repository, this file contains an overview, instructions, and helpful tips for using the designs and scripts.
3. [[https://github.com/24x7fpga/RTL/tree/master/rtl_designs][rtl_designs]]: Contains the core RTL design blocks implemented in Verilog and SystemVerilog. Each subfolder represents a specific design modules.
4. [[https://github.com/24x7fpga/RTL/tree/master/rtl_tcl_scripts][rtl_tcl_scripts]]: Contains TCL scripts for automating tasks such as synthesis, simulation, and verification in Vivado. ==rtl_run.tcl==: A script to automate the execution of design and simulation flows.
5. [[https://github.com/24x7fpga/RTL/tree/master/rtl_templates][rtl_templates]]: Provides templates for quickly starting new RTL design and testbench files, ensuring consistency across the repository:
   - [[https://github.com/24x7fpga/RTL/blob/master/rtl_templates/design.sv][design.sv]]: Template for creating SystemVerilog design modules.
   - [[https://github.com/24x7fpga/RTL/blob/master/rtl_templates/interface.sv][interface.sv]]: Template for defining SystemVerilog interfaces.
   - [[https://github.com/24x7fpga/RTL/blob/master/rtl_templates/package.svh][package.svh]]: Template for defining SystemVerilog packages for parameterized designs.
   - [[https://github.com/24x7fpga/RTL/blob/master/rtl_templates/tb_design.sv][tb_design.sv]]: Template for creating testbenches for verifying RTL modules.

* Python Scripts

The [[https://github.com/24x7fpga/Python_Scripts/tree/master][Python_Scripts]] repository includes several Python scripts that automate and simplify the design and simulation processes for various tools. These scripts are used to automate repetative tasks such project creation, simulation, etc. The folder stucture is shown below: 

#+begin_src bash
Python_Scripts
.
├── clean_scripts
│   └── clean_all.py
├── iv_scripts
│   ├── archived
│   ├── iv_clean.py
│   └── iv_run.py
├── rtl_scripts
│   └── rtl_design.py
├── sv_scripts
│   ├── sv_clean.py
│   ├── sv_cstrs_design.py
│   ├── sv_cstrs_run.py
│   ├── sv_design.py
│   └── sv_run.py
├── uvm_scripts
│   ├── uvm_clean.py
│   └── uvm_run.py
├── veri_scripts
│   ├── config.vlt
│   ├── veri_clean.py
│   └── veri_run.py
└── vivado_scripts
    ├── vivado_clean.py
    └── vivado_run.py
#+end_src

A detailed description of all the automation scripts can be found [[https://github.com/24x7fpga/Python_Scripts/tree/master][here]]. 

For streamlining ==RTL design and simulation==, following scripts are utilized:

** [[https://github.com/24x7fpga/Python_Scripts/tree/master/rtl_scripts][rtl_scripts]]
 
- Purpose: Automates the creation of RTL design and testbench files. Ensures consistency in design and testbench structure by leveraging predefined templates.
            
- [[https://github.com/24x7fpga/Python_Scripts/blob/master/rtl_scripts/rtl_design.py][rtl_design.py]]: Creates a new folder in the rtl_designs directory.Generates design and testbench files using templates from the rtl_templates directory.
    
** [[https://github.com/24x7fpga/Python_Scripts/tree/master/iv_scripts][iv_scripts]]
        
- Purpose: Facilitates simulation and cleanup when using Icarus Verilog. Automates Icarus Verilog-based design workflows for efficient simulation and cleanup.
        
- [[https://github.com/24x7fpga/Python_Scripts/blob/master/iv_scripts/iv_run.py][iv_run.py]]: Simulates the RTL design using Icarus Verilog.
- [[https://github.com/24x7fpga/Python_Scripts/blob/master/iv_scripts/iv_clean.py][iv_clean.py]]: Removes all files generated during the Icarus Verilog simulation, such as .vvp and .vcd files.
        
** [[https://github.com/24x7fpga/Python_Scripts/tree/master/veri_scripts][veri_scripts]]
        
- Purpose: Manages the simulation process using Verilator and provides a seamless Verilator simulation and cleanup workflow.
             
- [[https://github.com/24x7fpga/Python_Scripts/blob/master/veri_scripts/veri_run.py][veri_run.py]]: Simulates the RTL design using Verilator.
            
- [[https://github.com/24x7fpga/Python_Scripts/blob/master/veri_scripts/veri_clean.py][veri_clean.py]]: Cleans up all files and directories generated during Verilator simulations.

- [[https://github.com/24x7fpga/Python_Scripts/blob/master/veri_scripts/config.vlt][config.vlt]]: The ==config.vlt== file in Verilator customizes simulation settings and overrides default behaviors. 
        
** [[https://github.com/24x7fpga/Python_Scripts/tree/master/vivado_scripts][vivado_scripts]]
        
- Purpose: Integrates Vivado TCL scripting for project creation and simulation.
            
- [[https://github.com/24x7fpga/Python_Scripts/blob/master/vivado_scripts/vivado_run.py][vivado_run.py]]: Invokes the rtl_run.tcl script from the rtl_tcl_script folder to create and simulate a Vivado project.
            
- [[https://github.com/24x7fpga/Python_Scripts/blob/master/vivado_scripts/vivado_clean.py][vivado_clean.py]]: Removes Vivado-generated project files, logs, and other artifacts.
        
** [[https://github.com/24x7fpga/Python_Scripts/tree/master/clean_scripts][clean_scripts]]
        
- Purpose: General cleanup utility for removing simulation files and logs across all tools. Simplifies maintaining a clean working environment.
            
- [[https://github.com/24x7fpga/Python_Scripts/blob/master/clean_scripts/clean_all.py][clean_all.py]]: Deletes all files, logs, and project directories created by various tools (e.g., Icarus Verilog, Verilator, and Vivado).
       
These scripts collectively enhance productivity by automating repetitive tasks, ensuring consistency, and providing efficient workflows for RTL design and simulation using Icarus Verilog, Verilator, and Vivado.

* Ongoing list of design examples

- [[https://github.com/24x7fpga/RTL/tree/master/rtl_designs/adder_subtractor][Adder Subtractor]]
- [[https://24x7fpga.com/rtl_directory/2024_08_05_16_05_55_always_and_always_comb/][Always@(*) and Always_Comb]]
- [[https://github.com/24x7fpga/RTL/tree/master/rtl_designs/apb][APB Protocol]]
- [[https:https://24x7fpga.com/rtl_directory/2024_07_26_17_07_08_assign_and_if_else_statement/][Assign and If-Else Statement]]
- [[https://24x7fpga.com/rtl_directory/2024_09_07_10_52_50_asynchronous_fifo/][Asynchronous FIFO]]
- [[https://24x7fpga.com/rtl_directory/2024_07_25_11_34_45_synchronous_and_asynchronous_reset/][Asynchrnous Reset]]
- [[https://github.com/24x7fpga/RTL/tree/master/rtl_designs/barrel_shift][Barrel Shifter]]
- [[https://24x7fpga.com/rtl_directory/2024_07_26_17_10_23_blocking_and_non_blocking_assignment/][Blocking & Non-Blocking Assignment]]
- [[https://24x7fpga.com/rtl_directory/2024_07_25_11_36_52_casex_and_casez/][Casex and Casez]]
- [[https://24x7fpga.com/rtl_directory/2024_09_13_12_36_11_clock_gating/][Clock Gating]]
- [[https://24x7fpga.com/rtl_directory/2024_07_18_21_58_46_code_converter/][Code Converter]]
- [[https://24x7fpga.com/rtl_directory/2024_07_06_15_54_47_comparator/][Comparator]]
- [[https://24x7fpga.com/rtl_directory/2024_12_21_d_flip_flop_operation/][D-FF with Enable]]
- [[https://24x7fpga.com/rtl_directory/2024_06_23_21_30_22_decoder/][Decoder]]
- [[https://24x7fpga.com/rtl_directory/2024_06_14_22_07_44_de_multiplexer/][De-Multiplexer]]
- [[https://24x7fpga.com/rtl_directory/2024_10_07_00_08_52_difference_between_and/][Difference between '==' and '===']]
- [[https://24x7fpga.com/rtl_directory/2024_07_22_14_10_16_edge_detector/][Edge Detector]]
- [[https://24x7fpga.com/rtl_directory/2024_06_23_20_40_25_encoder/][Encoder]]
- [[https://github.com/24x7fpga/RTL/tree/master/rtl_designs/even_parity][Even Parity]]
- [[https://github.com/24x7fpga/RTL/tree/master/rtl_designs/fibonacci][Fibonacci]]
- [[https://github.com/24x7fpga/RTL/tree/master/rtl_designs/flow_ctrl_reg][Flow Control Register]]
- [[https://github.com/24x7fpga/RTL/tree/master/rtl_designs/freq_div][Frequency Divider]]
- [[https://github.com/24x7fpga/RTL/tree/master/rtl_designs/fsm_dual_edge][FSM: Dual Edge Detector]]
- [[https://github.com/24x7fpga/RTL/tree/master/rtl_designs/fsm_pos_edge][FSM: Positive Edge Detector]]
- [[https://github.com/24x7fpga/RTL/tree/master/rtl_designs/fsm_seq][FSM: Sequence detector]]
- [[https://24x7fpga.com/rtl_directory/2024_06_08_11_32_42_full_adder/][Full Adder]]
- [[https://24x7fpga.com/rtl_directory/2024_06_05_22_56_41_half_adder/][Half Adder]]
- [[https://github.com/24x7fpga/RTL/tree/master/rtl_designs/i2c][I2C Protocol]]
- [[https://github.com/24x7fpga/RTL/tree/master/rtl_designs/lfsr][Linear Feedback Shift Register]]
- [[https://24x7fpga.com/rtl_directory/2024_07_18_23_30_22_mod_n_counter/][Mod-N Counter]]
- [[https://24x7fpga.com/rtl_directory/2024_06_13_12_22_45_multiplexer/][Multiplexer]]
- [[https://github.com/24x7fpga/RTL/tree/master/rtl_designs/mux_gates][MUX: Basic Gates]]
- [[https://github.com/24x7fpga/RTL/tree/master/rtl_designs/pwm][Pulse Width Modulator]]
- [[https://github.com/24x7fpga/RTL/tree/master/rtl_designs/reg_file][Register File]]
- [[https://github.com/24x7fpga/RTL/tree/master/rtl_designs/register][Register]]
- [[https://24x7fpga.com/rtl_directory/2024_07_22_11_17_17_ring_counter/][Ring Counter]]
- [[https://24x7fpga.com/rtl_directory/2024_07_23_13_11_22_read_only_memory/][ROM]]
- [[https://24x7fpga.com/rtl_directory/2024_07_06_19_54_50_shift_register/][Shift Register]]
- [[https://github.com/24x7fpga/RTL/tree/master/rtl_designs/sm_adder][Signed Magnitude Adder]]
- [[https://github.com/24x7fpga/RTL/tree/master/rtl_designs/spi][SPI]]
- [[https://24x7fpga.com/rtl_directory/2024_08_22_14_57_15_synchronous_fifo/][Synchronus FIFO]]
- [[https://24x7fpga.com/rtl_directory/2024_09_17_20_46_04_uart/][UART]]
- [[https://github.com/24x7fpga/RTL/tree/master/rtl_designs/univ_cntr][Universal Counter]]
- [[https://24x7fpga.com/rtl_directory/2024_07_10_20_30_35_universal_shift_register/][Universal Shift Register]]
- [[https://24x7fpga.com/rtl_directory/2024_07_16_22_30_28_up_down_counter/][Up/Down Counter]]



